#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        
        PUSH    #02
        CALL    #sum
        POP     R4
        
        PUSH    #3                     ; call by value
        CALL    #sum                    ; result will be stored on
                                        ; the top of the stack
        POP      R4                     ; R4 should be 55 now

        PUSH    #10
        CALL    #sum
        POP     R4
        JMP     $                       ; jump to current location '$'

sum:                                    ; the sum function
        PUSH    R4                      ; save local varable
        MOV.W   4(SP), R4
        CMP.W   0(R3), R4
        JZ      _sum_end

        DEC.W   R4
        PUSH    R4
        CALL    #sum
        POP     R4
        ADD.W   R4, 4(SP)


_sum_end:
        POP     R4                      ; restore local varable
        RET                             ; return to caller
                                        ; (endless loop)
        END
