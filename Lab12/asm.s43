#include "msp430.h"                     ; #define controlled include file

        NAME    main                    ; module name

        PUBLIC  main                    ; make the main label vissible
                                        ; outside this module
        ORG     0FFFEh
        DC16    init                    ; set reset vector to 'init' label

        RSEG    CSTACK                  ; pre-declaration of segment
        RSEG    CODE                    ; place program in 'CODE' segment

init:   MOV     #SFE(CSTACK), SP        ; set up stack

main:   NOP                             ; main program
        MOV.W   #WDTPW+WDTHOLD,&WDTCTL  ; Stop watchdog timer
        BIS.B   #1h, &P1DIR             ; enable led
        BIC.B   #8h, &P1DIR             ; enable button
        
        BIS.B   #8h, &P1IE              ; enab. btn interupt
        BIC.B   #8h, &P1IFG             ; clear prv. interupt flag
        BIS.B   #8h, &P1REN             ; enab. resister
        BIS.B   #8h, &P1OUT             ; set resister to pull up
      
loop:   
        BIS.W   #LPM0+GIE, SR           ; enter low power mode
        NOP

P1_ISR:
        XOR.B   #1h, &P1OUT             ; toggle led
        BIC.B   #8h, &P1IFG             ; clear prv. interupt flag for btn
        RETI
        
        COMMON  INTVEC                  ; Interrupt Vectors
        ORG     RESET_VECTOR            ; MSP430 RESET
Vector:
        ORG     PORT1_VECTOR            ; create button vector for interupt
        DW      P1_ISR                  ; link interupt function
        
        JMP $                           ; jump to current location '$'
                                        ; (endless loop)
        END
